# -*- coding: utf-8 -*-
# coding=utf-8
import threading

import MySQLdb
import PyMysqlPool.mysql.connector
from mysql.connector import errors
from PyMysqlPool.db_util.python_rf.pool_convertor import FuzzyMySQLConverter

try:
    from flask import _app_ctx_stack as _ctx_stack
except ImportError:
    from flask import _request_ctx_stack as _ctx_stack

CONNECTION_POOL_LOCK = threading.RLock()


def get_pool_connection(_db_config):
    return get_pool_conn_implicitly(_db_config)


def get_pool_conn_implicitly(_db_config):
    config = _db_config
    if 'pool' not in config:
        pool = None
    else:
        pool = config['pool']
        if 'use' not in pool:
            raise errors.OperationalError("MySQL pool config error must pool key use")
        if 'size' not in pool:
            raise errors.OperationalError("MySQL pool config error must pool key size")
        if 'name' not in pool:
            raise errors.OperationalError("MySQL pool config error must pool key name")

    if pool and pool['use']:
        conn = PyMysqlPool.mysql.connector.connect(
            pool_name=pool['name'], pool_size=pool['size'],
            host=config['host'], port=config.get('port', 3306),
            user=config['user'], passwd=config['password'],
            db=config['database'], charset=config.get('charset', 'utf8'),
            use_unicode=True, connect_timeout=1000
        )
        conn.set_converter_class(FuzzyMySQLConverter)
    else:
        conn = MySQLdb.connect(
            host=config['host'], port=config.get('port', 3306),
            user=config['user'], passwd=config['password'],
            db=config['database'], charset=config.get('charset', 'utf8'),
            use_unicode=True
        )
    return conn


def get_connections_count(pool_name=None):
    ctx = _ctx_stack.top
    if hasattr(ctx, "pool_connections_count"):
        return ctx.pool_connections_count.get(pool_name, 0)
    return 0
